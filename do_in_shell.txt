#使用flask-SQLAlchemy的方法
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme> flask shell
Python 3.8.16 (default, Mar  2 2023, 03:18:16) [MSC v.1916 64 bit (AMD64)] on win32
App: app
Instance: D:\Projects\vscode_project\flask-env\gpt-helpme\instance
>>> db.create_all() # 寻找所有db.Model的子类，然后在数据库中创建对应的表
>>> # 会发现出现了一个data.sqlite的文件
>>> # 插入一些admin行
>>> a1=Admin(name='admin',password='666')
>>> a2=Admin(name='john',password='777')
>>> print(a1.name)
admin
>>> print(a2.name)
john
>>> db.session.add(a1)
>>> db.session.add(a2)
>>> db.session.commit()
>>> exit()
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme>


//添加数据库迁移
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme> flask db init
Creating directory D:\Projects\vscode_project\flask-env\gpt-helpme\migrations ...  done
Creating directory D:\Projects\vscode_project\flask-env\gpt-helpme\migrations\versions ...  done
Generating D:\Projects\vscode_project\flask-env\gpt-helpme\migrations\alembic.ini ...  done
Generating D:\Projects\vscode_project\flask-env\gpt-helpme\migrations\env.py ...  done
Generating D:\Projects\vscode_project\flask-env\gpt-helpme\migrations\README ...  done
Generating D:\Projects\vscode_project\flask-env\gpt-helpme\migrations\script.py.mako ...  done
Please edit configuration/connection/logging settings in 'D:\\Projects\\vscode_project\\flask-env\\gpt-helpme\\migrations\\alembic.ini' before proceeding.
//对Admin模型类去做一定的修改，比如添加一个列, 完成之后再回来输入命令
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme> flask db migrate -m "给admin表添加id列"
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.autogenerate.compare] Detected added column 'admin.id'
INFO  [alembic.autogenerate.compare] Detected added unique constraint 'None' on '['id']'
Generating D:\Projects\vscode_project\flask-env\gpt-helpme\migrations\versions\e4051f2f5a06_给admin表添加id列.py ...  done
// 修改脚本
def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('admin', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), nullable=True))
        
        # batch_op.create_unique_constraint(None, ['id'])
    connection = op.get_bind()
    batch_op.execute("UPDATE admin SET id = 1 WHERE name = 'admin'")
    batch_op.execute("UPDATE admin SET id = 2 WHERE name = 'john'")
    # ### end Alembic commands ###
// 回来重新执行更新命令
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme> flask db upgrade
INFO  [alembic.runtime.migration] Context impl SQLiteImpl.
INFO  [alembic.runtime.migration] Will assume non-transactional DDL.
INFO  [alembic.runtime.migration] Running upgrade  -> e4051f2f5a06, 给admin表添加id列
// 查看表格验证更新
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme> sqlite3 .\data.sqlite
SQLite version 3.41.2 2023-03-22 11:56:21
Enter ".help" for usage hints.
sqlite> .tables
admin            alembic_version
sqlite> select * from admin;
admin|666|1
john|777|2
sqlite> .quit
(flask-env) PS D:\Projects\vscode_project\flask-env\gpt-helpme>